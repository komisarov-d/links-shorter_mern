{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","components/Loader.jsx","components/LinksList.jsx","pages/LinksPage.jsx","pages/CreatePage.jsx","components/LinkCard.jsx","pages/DetailPage.jsx","pages/AuthPage.jsx","hooks/message.hook.js","components/Navbar.jsx","App.jsx","hooks/auth.hook.js","routes.jsx","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","style","display","justifyContent","paddingTop","className","LinksList","links","length","map","link","index","key","_id","from","to","LinksPage","setLinks","useContext","fetchLinks","Authorization","fetched","useEffect","CreatePage","history","useHistory","auth","setLink","window","M","updateTextFields","pressHandler","e","push","placeholder","id","type","value","onChange","target","onKeyPress","htmlFor","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","event","name","registerHandler","loginHandler","disabled","marginRight","onClick","Navbar","padding","preventDefault","App","setToken","setUserId","ready","setReady","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.77b3433c.chunk.js","sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n\r\n            if (!response.ok) {\r\n\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n    const clearError = useCallback( () => setError(null),[])\r\n    return {loading, request, error, clearError}\r\n}","import { createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login:noop,\r\n    logout:noop,\r\n    isAuthenticated: false\r\n})","import React from \"react\";\r\n\r\n\r\nexport const Loader = () => {\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent:'center', paddingTop:'2rem'}}>\r\n        <div className=\"preloader-wrapper big active\" >\r\n            <div className=\"spinner-layer spinner-green-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"/>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"/>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const LinksList = ({links}) => {\r\n\r\n    if (!links.length){\r\n        return <p className={'center'}>Список ссылок пуст.</p>\r\n    }\r\n    return (\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>№</th>\r\n                    <th>Оригинал</th>\r\n                    <th>Сокращенная</th>\r\n                    <th>Открыть</th>\r\n                </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                {links.map((link, index) => {\r\n                    return (\r\n                        <tr key={link._id}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{link.from}</td>\r\n                            <td>{link.to}</td>\r\n                            <td>\r\n                                <Link to={`/detail/${link._id}`}>Открыть</Link>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </table>\r\n    )\r\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {LinksList} from '../components/LinksList'\r\n\r\nexport const LinksPage = () => {\r\n    const [links, setLinks] = useState([])\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n\r\n    const fetchLinks = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/link', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLinks(fetched)\r\n        } catch (e) {\r\n\r\n        }\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchLinks()\r\n    },[fetchLinks])\r\n    if (loading){\r\n        return <Loader/>\r\n    }\r\n    return <>\r\n        {!loading && <LinksList links={links}/>}\r\n    </>\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\n\r\nexport const CreatePage = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n    const {request} = useHttp()\r\n    const [link, setLink] = useState('')\r\n\r\n    useEffect(() => {\r\n        window.M.updateTextFields()\r\n    }, [])\r\n\r\n    const pressHandler = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            try {\r\n                const data = await request('/api/link/generate', 'POST', {from: link}, {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                })\r\n                history.push(`/detail/${data.link._id}`)\r\n            } catch (e) {\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'row'}>\r\n            <div className=\"col s8 offset-s2\" style={{paddingTop: '2rem'}}>\r\n                <div className=\"input-field\">\r\n                    <input placeholder=\"Вставьте ссылку\"\r\n                           id=\"link\"\r\n                           type=\"text\"\r\n                           value={link}\r\n                           onChange={e => setLink(e.target.value)}\r\n                           onKeyPress={pressHandler}\r\n                    />\r\n                    <label htmlFor=\"link\">Введите ссылку</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const LinkCard = ({link}) => {\r\n    return (\r\n        <>\r\n            <h2>Ссылка</h2>\r\n            <p>Ваша ссылка: <a href={link.to} target='_blank' rel=\"noopener noreferrer\">{link.to}</a></p>\r\n            <p>Откуда: <a href={link.from} target='_blank' rel=\"noopener noreferrer\">{link.from}</a></p>\r\n            <p>Количество кликов по ссылке: <strong>{link.clicks}</strong></p>\r\n            <p>Дата создания: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\r\n        </>\r\n    )\r\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {useParams} from 'react-router-dom'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {LinkCard} from \"../components/LinkCard\";\r\n\r\nexport const DetailPage = () => {\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const [link, setLink] = useState(null)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n\r\n            setLink(fetched)\r\n\r\n        } catch (e) {}\r\n    }, [token, linkId, request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    }, [getLink])\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!loading && link && <LinkCard link={link}/>}\r\n        </>\r\n    )\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    let message = useMessage()\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const [form, setForm] = useState({\r\n        email: '',\r\n        password: ''\r\n    })\r\n    useEffect(() => {\r\n        message(error)\r\n        clearError()\r\n    }, [error, message, clearError])\r\n    useEffect(() => {\r\n        window.M.updateTextFields()\r\n    },[])\r\n    const changeHandler = event => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n    }\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            message(data.message)\r\n\r\n        } catch (e) {\r\n        }\r\n    }\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            auth.login(data.token, data.userId)\r\n        } catch (e) {\r\n        }\r\n    }\r\n    return (\r\n        <div className={'row'}>\r\n            <div className=\"col s6 offset-s3\">\r\n                <h1 className={'center'}>Сокращение ссылок</h1>\r\n                <div className=\"card blue darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">Авторизация</span>\r\n                        <div>\r\n                            <div className=\"input-field\">\r\n                                <input placeholder=\"Введите email\"\r\n                                       id=\"email\"\r\n                                       type=\"text\"\r\n                                       name='email'\r\n                                       value={form.email}\r\n                                       className='yellow-input'\r\n                                       onChange={changeHandler}\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input onChange={changeHandler}\r\n                                       placeholder=\"Введите пароль\"\r\n                                       id=\"password\"\r\n                                       name='password'\r\n                                       type=\"password\"\r\n                                       value={form.password}\r\n                                       className='yellow-input'\r\n                                />\r\n                                <label htmlFor=\"password\">Пароль</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <button\r\n                            className={'btn yellow darken-4'}\r\n                            disabled={loading}\r\n                            style={{marginRight: 10}}\r\n                            onClick={loginHandler}>\r\n                            Войти\r\n                        </button>\r\n                        <button\r\n                            onClick={registerHandler}\r\n                            disabled={loading}\r\n                            className={'btn grey lighten-1 black-text'}>\r\n                            Регистрация\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useCallback} from \"react\";\r\n\r\nexport const useMessage = () => {\r\n   return useCallback((text) => {\r\n        if (window.M && text) {\r\n            window.M.toast({html: text})\r\n        }\r\n    }, [])\r\n}","import React, {useContext} from \"react\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const Navbar = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n    const logoutHandler = (e) => {\r\n        e.preventDefault()\r\n        auth.logout()\r\n        history.push('/')\r\n    }\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper teal accent-4\" style={{padding:'0 2rem'}}>\r\n                <span className=\"brand-logo\">Сокращение ссылок</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink to={'/create'}>Создать</NavLink></li>\r\n                    <li><NavLink to={'/links'}>Ссылки</NavLink></li>\r\n                    <li><a onClick={logoutHandler} href={'/'}>Выйти</a></li>\r\n\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {useRoutes} from \"./routes\";\r\nimport {useAuth} from \"./hooks/auth.hook\";\r\nimport 'materialize-css'\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport {Navbar} from \"./components/Navbar\";\r\nimport {Loader} from \"./components/Loader\";\r\n\r\nfunction App() {\r\n    const {token, userId, login, logout, ready} = useAuth()\r\n    const isAuthenticated = !!token\r\n    const routes = useRoutes(isAuthenticated)\r\n\r\n    if (!ready){\r\n        return <Loader/>\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            token, userId, login, logout, isAuthenticated\r\n        }} >\r\n            <BrowserRouter>\r\n                {isAuthenticated && <Navbar/>}\r\n                <div className={'container'}>\r\n                    {routes}\r\n                </div>\r\n            </BrowserRouter>\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null)\r\n    const [userId, setUserId] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n\r\n    const login = useCallback((jwtToken, id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId:id, token:jwtToken\r\n        }))\r\n    },[])\r\n\r\n    const logout = useCallback(() => {\r\n        setUserId(null)\r\n        setToken(null)\r\n        localStorage.removeItem(storageName)\r\n    },[])\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n        if (data && data.token){\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return{logout, login, token, userId, ready}\r\n}","import React from \"react\";\r\nimport {Redirect, Switch, Route} from \"react-router-dom\";\r\nimport {LinksPage} from \"./pages/LinksPage\";\r\nimport {CreatePage} from \"./pages/CreatePage\";\r\nimport {DetailPage} from \"./pages/DetailPage\";\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\n\r\nexport const useRoutes = (isAuthenticated) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path={'/links'} exact>\r\n                    <LinksPage/>\r\n                </Route>\r\n                <Route path={'/create'} exact>\r\n                    <CreatePage/>\r\n                </Route>\r\n                <Route path={'/detail/:id'} exact>\r\n                    <DetailPage/>\r\n                </Route>\r\n                <Redirect to={'/create'}/>\r\n            </Switch>\r\n        )\r\n    }\r\n    return (\r\n        <Switch>\r\n            <Route path={'/'} exact>\r\n                <AuthPage/>\r\n            </Route>\r\n            <Redirect to={'/'}/>\r\n        </Switch>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}